<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>Matches Oniguruma's Ruby regexp syntax (TextMate uses Oniguruma in Ruby mode).</string>
	<key>fileTypes</key>
	<array>
		<string>re</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~R</string>
	<key>name</key>
	<string>Regular Expressions (Oniguruma)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>\\[bBAZzG]|\^|\$</string>
			<key>name</key>
			<string>keyword.control.anchor.regexp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\\([0-7]{3}|x(\h\h|\{\h{,8}\}))</string>
			<key>name</key>
			<string>constant.character.numeric.regexp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\\[1-9]\d*</string>
			<key>name</key>
			<string>keyword.other.back-reference.regexp</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.back-reference.named.regexp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.section.back-reference</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.back-reference.named.regexp</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\\k\&lt;)([a-z]\w*)(\&gt;)</string>
			<key>name</key>
			<string>keyword.other.back-reference.named.regexp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\[\:(\^)?(alnum|alpha|ascii|blank|cntrl|x?digit|graph|lower|print|punct|space|upper)\]</string>
			<key>name</key>
			<string>constant.other.character-class.posix.regexp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>[?+*][?+]?|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??</string>
			<key>name</key>
			<string>keyword.operator.quantifier.regexp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\|</string>
			<key>name</key>
			<string>keyword.operator.or.regexp</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\(\?\#</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>comment.block.regexp</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.</string>
			<key>match</key>
			<string>(?&lt;=^|\s)#\s[[a-zA-Z0-9,. \t?!-:][^\x{00}-\x{7F}]]*$</string>
			<key>name</key>
			<string>comment.line.number-sign.regexp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\(\?[imx-]+\)</string>
			<key>name</key>
			<string>keyword.other.option-toggle.regexp</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\()((\?=)|(\?!)|(\?&lt;=)|(\?&lt;!))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.regexp</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.assertion.look-ahead.regexp</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>meta.assertion.negative-look-ahead.regexp</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>meta.assertion.look-behind.regexp</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>meta.assertion.negative-look-behind.regexp</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.regexp</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.group.assertion.regexp</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\()((\?(&gt;|[imx-]*:))|(\?&lt;)([a-z]\w*)(&gt;))?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.regexp</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.group-options.regexp</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.other.group-options.regexp</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>entity.name.section.group.regexp</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>keyword.other.group-options.regexp</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.regexp</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.group.regexp</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#character-class</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>character-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[wWsSdDhH]|\.</string>
					<key>name</key>
					<string>constant.character.character-class.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.backslash.regexp</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)(\^)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.negation.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.other.character-class.set.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#character-class</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(.|(\\.))\-([^\]]|(\\.))</string>
							<key>name</key>
							<string>constant.other.character-class.range.regexp</string>
						</dict>
						<dict>
							<key>match</key>
							<string>&amp;&amp;</string>
							<key>name</key>
							<string>keyword.operator.intersection.regexp</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.regexp.oniguruma</string>
	<key>uuid</key>
	<string>D609BF3F-BEDB-41AE-BA6F-903CC77A7BB3</string>
</dict>
</plist>
