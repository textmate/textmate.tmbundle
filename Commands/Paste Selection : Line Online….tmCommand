<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -rjcode -KU

BUNDLE_SUPPORT = ENV['TM_BUNDLE_SUPPORT']
SUPPORT_PATH = ENV['TM_SUPPORT_PATH']

PASTE_URL = ENV['TM_PASTIE_URL'] || 'http://pastie.org/pastes'

require "#{BUNDLE_SUPPORT}/lib/doctohtml.rb"
require "#{SUPPORT_PATH}/lib/textmate"
require "#{SUPPORT_PATH}/lib/tm/detach"
require "#{SUPPORT_PATH}/lib/progress"
require "#{SUPPORT_PATH}/lib/escape"
require 'cgi'
require 'fileutils'
require 'zlib'
require "yaml"
require "iconv"
require "tempfile"

def temp_script(script)
  dest = %x{ /usr/bin/mktemp -t tm_paste }.chomp
  at_exit { File.delete dest }
  FileUtils.cp(script, dest)
  dest
end

# example: ["Colloquy", "#textmate"] -&gt; [ 2, 1 ]
def indices_for_names(names, tree)
  name = names.shift
  node = tree.find { |n| n["name"] == name }
  return [ 0 ] if node.nil?
  res  = [ tree.index(node) ]
  res += indices_for_names(names, node["children"]) unless names.empty? || node["children"].nil?
  return res
end

# example: [ 2, 1 ] -&gt; ["Colloquy", "#textmate"]
def names_for_indices(indices, tree)
  node = tree[indices.shift.to_i]
  res  = [ node["name"] ]
  res += names_for_indices(indices, node["children"]) unless indices.empty?
  return res
end

PREFS_FILE = "#{ENV['HOME']}/Library/Preferences/com.macromates.textmate.paste_online.yaml"

def load_prefs(destinations)
  prefs = File.open(PREFS_FILE) { |file| YAML.load(file) } rescue { }
  selected = prefs['selectedDestinations'] || [ [ "Paste to Colloquy:", "#textmate" ] ]
  selected.collect! { |names| indices_for_names(names, destinations) }
  return { 'selectedDestinations' =&gt; selected }
end

def save_prefs(params)
  selected = params['selectedDestinations'].dup
  selected.collect! { |indices| names_for_indices(indices.dup, params['destinations']) }
  File.open(PREFS_FILE, "w") { |file| YAML.dump({ 'selectedDestinations' =&gt; selected }, file) }
end

def get_destinations
  destinations = []
  node = nil

  actions = %x{ osascript #{e_sh temp_script(BUNDLE_SUPPORT + "/get_destinations.scpt")} }
  actions.split("\n").each do |action|
    if action =~ /^\t(.+)/ then
      (node['children'] ||= [ ]) &lt;&lt; { 'name' =&gt; $1 }
    else
      node = { 'name' =&gt; action }
      destinations &lt;&lt; node
    end
  end

  destinations.sort! { |a, b| a['name'] &lt;=&gt; b['name'] }
  destinations.each { |e| e['children'].sort! { |a, b| a['name'] &lt;=&gt; b['name'] } if e.has_key? 'children' }

  prefs = load_prefs(destinations)

  window_title = if ENV.has_key? 'TM_SELECTED_TEXT'; 'Paste Selection Online'; else 'Paste Document Online'; end
  default_wrap = (ENV['TM_SCOPE'] =~ /^text\./) ? 1 : 0
  parameters = {
    'windowTitle'           =&gt; window_title,
    'destinations'          =&gt; destinations,
    'selectedDestinations'  =&gt; prefs['selectedDestinations'],
    'private'               =&gt; true,
    'lineWrap'              =&gt; default_wrap,
  }.to_plist

  res = %x{ "$DIALOG" -cmp #{e_sh parameters} pastebin }
  exit if $? != 0

  res = OSX::PropertyList.load(res)
  exit unless res.has_key? 'returnCode'

  save_prefs(res)

  actions = []
  res['selectedDestinations'].to_a.each do |index_array|
    path = []
    node = destinations
    index_array.each do |index|
      path &lt;&lt; node[index.to_i]['name']
      node = node[index.to_i]['children']
    end
    actions &lt;&lt; path.join(' ')
  end

  [ actions.join("\n"), res['private'], res['lineWrap'] ]
end

TM_APP_PATH = TextMate.app_path

def find_language_ext
	bundle_dirs = [
		File.expand_path('~/Library/Application Support/TextMate/Bundles'),
		'/Library/Application Support/TextMate/Bundles',
		TM_APP_PATH + '/Contents/SharedSupport/Bundles'
	]

  if scope = ENV['TM_SCOPE'] then
    scope = scope.split(' ').first
    bundle_dirs.each do |dir|
      Dir.glob(dir + '/*.tmbundle/Syntaxes/*.{plist,tmLanguage}') do |filename|
        File.open(filename) do |io|
          begin
            plist = OSX::PropertyList.load(io)
            if scope == plist['scopeName'].to_s then
              return Array(plist['fileTypes']).first || 'txt'
            end
          rescue Exception =&gt; e
            abort "Error while parsing “#{filename}”\n\n#{e}"
          end
        end
      end
    end
  end

  ext = File.extname(ENV['TM_FILENAME'].to_s).sub(/\A\./, '')
  ext.empty? ? 'txt' : ext
end

def strip_leading(text, ch = ' ')
  count = text.gsub(/&lt;[^&gt;]+&gt;/, '').split("\n").map { |e| e =~ /^#{ch}*(?!#{ch}|$)/ ? $&amp;.length : nil }.reject { |e| e.nil? }.min
  text.send(text.respond_to?(:lines) ? :lines : :to_s).map { |line| count.times { line.sub!(/^((&lt;[^&gt;]+&gt;)*)#{ch}/, '\1') }; line }.join
end

URL_REGEXP = %r{
      \A(https?://)                             # scheme
      ([0-9a-z_!~*\'()-]+\.)*                   # tertiary domain(s) -- e.g. www. 
      ([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\.      # second level domain 
      ([a-z]{2,6})                              # first level domain -- e.g. .com or .museum 
      (:[0-9]{1,4})?                            # port number -- e.g. :80 
      ((/?)|                                    # a slash isn’t required if there is no file name 
      (/[0-9a-z_!~*\'().;?:@&amp;=+$,%#-]+)+/?)\z   # path
  }xi

def connect_to_server(name, url, *args)
  $status, res, response = :unknown, nil, '???'

  tmpFile = Tempfile.new('tm_paste_headers')
  tmpFilePath = tmpFile.path.dup
  tmpFile.close!

  server = $1 if url =~ %r{.*?://(.*?)(/.*)?$}
  TextMate.call_with_progress(:title =&gt; "Paste to #{name}", :message =&gt; "Contacting Host “#{server}”…", :cancel =&gt; lambda { $status = :cancel; Process.kill("INT", -Process.pid) }) do
    thr = Thread.new { sleep 60.0; $status = :timeout; Process.kill("INT", -Process.pid) rescue nil }

    oldpgid = Process.getpgid(0)
    Process.setpgid(0, 0)
    rd, wr = IO.pipe
    pid = fork do
      STDOUT.reopen(wr)
      rd.close
      exec('curl', url, "-D#{tmpFilePath}", '-sLo/dev/null', '-w%{url_effective}', *args)
    end
    Process.setpgid(0, oldpgid)
    wr.close
    res = rd.read
    Process.wait(pid)

    $status = :success if $?.exitstatus == 0 &amp;&amp; $status == :unknown

    thr.kill unless $status == :timeout
    thr.join
  end

  response = $1 if File.read(tmpFilePath) =~ /\AHTTP\/[0-9.]+ (.*?)\r?\n/
  File.unlink(tmpFilePath)

  $status = :error if res !~ URL_REGEXP || res == url # pastie returns the initial URL on some errors
  return $status, res, response
end

def paste_stdin(priv, wrap)
  xml       = STDIN.read

  text_file = Tempfile.new('tm_paste_text')
  html_file = Tempfile.new('tm_paste_html')

  text_file &lt;&lt; CGI::unescapeHTML(xml.gsub(/&lt;[^&gt;]*&gt;/, ''))
  text_file.close

  gz = Zlib::GzipWriter.new(html_file)
  gz.write(document_to_html(strip_leading(strip_leading(xml, " "), "\t")))
  gz.close
  html_file.close

  author = ENV['TM_AUTHOR'] || "#{ENV['TM_FULLNAME']} (#{ENV['USER']})"
  ext    = find_language_ext

  start_time   = Time.now
  $status, res, response = connect_to_server("Pastie", PASTE_URL,
    "-HExpect:",
    "-Fpaste[parser]=plaintext",
    "-Fpaste[restricted]=#{priv}",
    "-Fpaste[wrap]=#{wrap}",
    "-Fpaste[display_name]=#{author}",
    "-Fpaste[file_extension]=#{ext}",
    "-Fpaste[body]=&lt;#{text_file.path}",
    "-Fpaste[textmate_html_gz]=&lt;#{html_file.path}"
  )

  open(File.expand_path('~/Library/Logs/Pastie.log'), 'a') do |io|
    amount       = (File.size(text_file.path) + File.size(html_file.path)).to_s.gsub(/\d{1,3}(?=(\d{3})+(?!\d))/, '\0,') + " bytes"
    time_elapsed = '%.1f seconds' % (Time.now - start_time)
    io &lt;&lt; start_time.strftime('%F %T %Z: ') &lt;&lt; response &lt;&lt; " " &lt;&lt;
      case $status
        when :timeout then "Timeout pasting #{amount} after #{time_elapsed}\n"
        when :cancel  then "User cancelled pasting of #{amount} after #{time_elapsed}\n"
        when :error   then "Error after #{time_elapsed} pasting #{amount}\n"
        else           "Pasted #{amount} in #{time_elapsed}: #{res}\n"
      end
  end

  paste_via_rafb = 
  case $status
    when :timeout then TextMate::UI.alert(:warning, "Timeout Pasting", "There was a problem pasting your text (timeout).\nWould you like to use RAFB.net instead?", "Paste via RAFB", "Cancel") != "Cancel"
    when :error   then TextMate::UI.alert(:warning, "Error Pasting", "There was a problem pasting your text, pastie.org responded with #{response}\nWould you like to use RAFB.net instead?", "Paste via RAFB", "Cancel") != "Cancel"
    else false
  end

  if paste_via_rafb
    mode = $&amp; if ENV['TM_MODE'] =~ /^(C89|C|C\+\+|C#|Java|Pascal|Perl|PHP|PL\/I|Python|Ruby|SQL|VB)$/
    $status, res, response = connect_to_server("RAFB.net", "http://rafb.net/paste/paste.php",
      "-Fnick=#{ENV['USER']}",
      "-Fcvt_tabs=#{ENV['TM_TAB_SIZE']}",
      "-Ftext=&lt;#{text_file.path}",
      "-Flang=#{mode || "Plain Text"}"
    )
  end

  return $status == :success ? res : nil
end

TextMate.detach {
  dests, priv, wrap = get_destinations
  unless dests.empty?
    if url = paste_stdin(priv, wrap)
      dests = Iconv.iconv('mac', 'utf-8', dests) if %x{ defaults read /System/Library/CoreServices/SystemVersion ProductVersion } =~ /\A10\.4/
      %x{ osascript #{e_sh temp_script(BUNDLE_SUPPORT + "/paste_to_destinations.scpt")} #{e_sh url} #{e_sh dests} }
    end
  end
}
</string>
	<key>fallbackInput</key>
	<string>document</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>xml</string>
	<key>keyEquivalent</key>
	<string>^~V</string>
	<key>name</key>
	<string>Paste Document / Selection Online…</string>
	<key>output</key>
	<string>discard</string>
	<key>uuid</key>
	<string>6E779E48-F146-49BF-B60C-EFDFD1380772</string>
</dict>
</plist>
